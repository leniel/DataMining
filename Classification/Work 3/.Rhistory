hist(movies$imdb_score, breaks=30)
movies = read.csv("movie_metadata.csv")
setwd("../../data")
movies = read.csv("movie_metadata.csv")
hist(movies$imdb_score, breaks=30)
abline(v=mean(movies$imdb_score), lty=2)
hist(movies$title_year)
boxplot(imdb_score ~ title_year, data=movies, col="bisque", las=2)
boxplot(imdb_score ~ title_year, data=movies, col="bisque", las=2)
reordered_country = with(movies, reorder(country, -imdb_score, median))
hist(m3$appear.count, breaks=30)
library(googleVis)
library(dplyr)
m1 = movies %>% select(actor_1_name, actor_1_facebook_likes) %>%
group_by(actor_1_name) %>% summarize(appear.count=n())
m2 = left_join(movies, m1, by="actor_1_name")
m3 = m2 %>% select(actor_1_name, actor_1_facebook_likes, appear.count) %>%
distinct %>% arrange(desc(appear.count))
hist(m3$appear.count, breaks=30)
Bubble <- gvisBubbleChart(m3, idvar="actor_1_name",
xvar="appear.count", yvar="actor_1_facebook_likes",
sizevar="appear.count",
#colorvar="title_year",
options=list(
#hAxis='{minValue:75, maxValue:125}',
width=1000, height=800
)
)
plot(Bubble)
Bubble <- gvisBubbleChart(m3, idvar="actor_1_name",
xvar="appear.count", yvar="actor_1_facebook_likes",
sizevar="appear.count",
#colorvar="title_year",
options=list(
#hAxis='{minValue:75, maxValue:125}',
width=1000, height=800
)
)
cor(ms)
movies_with_good_variables = movies[, c("imdb_score",
"director_facebook_likes",
"cast_total_facebook_likes",
"actor_1_facebook_likes",
"actor_2_facebook_likes",
"actor_3_facebook_likes",
"movie_facebook_likes",
"facenumber_in_poster",
"gross",
"budget")]
mvs = na.omit(movies_with_good_variables)
x = as.matrix(mvs[, -1])
y = mvs[, 1]
grid = 10^seq(5, -2, length = 100)
ridge.models = glmnet(x, y, alpha = 0, lambda = grid)
dim(coef(ridge.models)) #20 different coefficients, estimated 100 times --once each per lambda value.
library("glmnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ridge.models = glmnet(x, y, alpha = 0, lambda = grid)
dim(coef(ridge.models)) #20 different coefficients, estimated 100 times --once each per lambda value.
coef(ridge.models) #Inspecting the various coefficient estimates.
plot(ridge.models, xvar = "lambda", label = TRUE, main = "Ridge Regression")
set.seed(0)
train = sample(1:nrow(x), 7*nrow(x)/10)
test = (-train)
y.test = y[test]
length(train)/nrow(x)
length(y.test)/nrow(x)
set.seed(0)
cv.ridge.out = cv.glmnet(x[train, ], y[train], lambda = grid, alpha = 0, nfolds = 10)
plot(cv.ridge.out, main = "Ridge Regression\n")
bestlambda.ridge = cv.ridge.out$lambda.min
bestlambda.ridge
log(bestlambda.ridge)
ridge.bestlambdatrain = predict(ridge.models, s = bestlambda.ridge, newx = x[test, ])
mean((ridge.bestlambdatrain - y.test)^2)
ridge.out = glmnet(x, y, alpha = 0)
predict(ridge.out, type = "coefficients", s = bestlambda.ridge)
ridge.bestlambda = predict(ridge.out, s = bestlambda.ridge, newx = x)
mean((ridge.bestlambda - y)^2)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
dim(coef(lasso.models)) #20 different coefficients, estimated 100 times --
coef(lasso.models) #Inspecting the various coefficient estimates.
set.seed(0)
cv.lasso.out = cv.glmnet(x[train, ], y[train], lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
bestlambda.lasso
log(bestlambda.lasso)
lasso.bestlambdatrain = predict(lasso.models, s = bestlambda.lasso, newx = x[test, ])
mean((lasso.bestlambdatrain - y.test)^2)
lasso.out = glmnet(x, y, alpha = 1)
predict(lasso.out, type = "coefficients", s = bestlambda.lasso)
lasso.bestlambda = predict(lasso.out, s = bestlambda.lasso, newx = x)
mean((lasso.bestlambda - y)^2)
source('~/Dev/DataMining/Classification/Work 3/movie_rating_prediction.r')
